#!/usr/bin/env perl
use strict;
use warnings;
use feature 'say';
use utf8;

use DuktapeXS qw(js_eval);
use Encode;
use JSON;
use Time::HiRes qw(gettimeofday tv_interval);
use LWP::Simple;

my %timings = ();

sub benchmark {
    my ($name, $count, $sub) = @_;

    my $t0 = [gettimeofday];
    my $i = $count;
    while ($i--) {
        $sub->()
    };

    my $elapsed = sprintf("%.3f", tv_interval($t0));
    my $freq = int($count / $elapsed);
    my $time = sprintf("%.2f", $elapsed / $count * 1000);

    say "$name: ${elapsed}s ($count ops, $freq ops/sec, ${time}ms)";
}

chdir './t/fixtures';

benchmark 'Create VM and execute', 1000, sub {
   if (js_eval(q{"Héllööö"}) ne "Héllööö") {
        die "Noooo";
   };
};

my $data = {
    foo => 1,
    bar => 2,
    animals => ['duck', 'goose', 'pig'],
    nested => {
        birds => { of => { a => 'feather' } }
    }
};

benchmark 'Create VM and load data', 1000, sub {
   js_eval(q{"Héllööö from javascript! "}, $data);
};

my $code_babel = q{
    var Babel = require('./babel');
    var input = 'const getMessage = () => \'Hello World\';';
    var output = Babel.transform(input, { presets: ['es2015'] }).code;
    //console.log(output);
};

my $code_buble = q{
    var buble = require('./buble');
    var input = 'const getMessage = () => \'Hello World\';';
    var output = buble.transform(input).code;
    //console.log(output);
};

my $code_preact = q{
    require('./shims');
    var preact = require('./preact');
    var ssr = require('./preact-render-to-string');
    var vdom = preact.h('div', null, 'Hello world');
    var output = ssr.render(vdom)
    //console.log(output)
};

my $code_moon = q{
    var Moon = require('./moon')
    var ssr = require('./moon-ssr');
    var app = new Moon({
        template: '<div id=\'app\'>{{msg}}</div>',
        data: { msg: 'Hello Moon!' }
    });
    var output = ssr.renderToString(app)
    //console.log(output);
};

benchmark 'Create VM and load babel', 5, sub {
    js_eval $code_babel;
};

benchmark 'Create VM and load buble', 5, sub {
    js_eval $code_buble;
};

benchmark 'Create VM and load preact', 10, sub {
    js_eval $code_preact;
};

benchmark 'Create VM and load moonjs', 10, sub {
    js_eval $code_moon;
};

benchmark 'Run node and load babel', 5, sub {
    system(qq{node -e "$code_babel"});
};

benchmark 'Run node and load buble', 5, sub {
    system(qq{node -e "$code_buble"});
};

benchmark 'Run node and load preact', 10, sub {
    system(qq{node -e "$code_preact"});
};

benchmark 'Run node and load moonjs', 10, sub {
    system(qq{node -e "$code_moon"});
};

benchmark 'Run node and load vue', 2, sub {
    system(q{node -e "
        try {
        const Vue = require('vue');
        const ssr = require('vue-server-renderer')
        const app = new Vue({
          template: '<div>Hello World</div>'
        })
        const renderer = ssr.createRenderer();
        renderer.renderToString(app, (err, html) => {
          if (err) throw err
          //console.log(html)
        })
        } catch (o_O) {};
    "});
};

# run t/fixtures/vue-service.js
benchmark 'Node service over HTTP', 500, sub {
    my $response = get("http://localhost:8088");
    # print STDOUT $response . "\n";
};

1;